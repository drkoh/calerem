Index: AndroidManifest.xml
===================================================================
--- AndroidManifest.xml	(revision 0)
+++ AndroidManifest.xml	(working copy)
@@ -0,0 +1,39 @@
+<?xml version="1.0" encoding="utf-8"?>
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    package="com.calerem"
+    android:versionCode="1"
+    android:versionName="1.0" >
+
+    <uses-sdk
+        android:minSdkVersion="11"
+        android:targetSdkVersion="17" />
+    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
+    <uses-permission android:name="android.permission.INTERNET" />
+    <uses-permission android:name="android.permission.READ_CONTACTS"/>
+    <uses-permission android:name="android.permission.SEND_SMS"/>
+    <instrumentation android:targetPackage="com.calerem" android:name="android.test.InstrumentationTestRunner"></instrumentation>
+    <uses-permission android:name="android.permission.GET_TASKS"/>
+    <uses-permission android:name="android.permission.WRITE_CONTACTS"/>
+    <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"/>
+
+    <application
+        android:allowBackup="true"
+        android:icon="@drawable/ic_launcher"
+        android:label="@string/app_name"
+        android:theme="@style/AppTheme" >
+        <uses-library android:name="android.test.runner" />
+        <activity
+            android:name="com.calerem.MainActivity"
+            android:label="@string/app_name" >
+            <intent-filter>
+                <action android:name="android.intent.action.MAIN" />
+
+                <category android:name="android.intent.category.LAUNCHER" />
+            </intent-filter>
+        </activity>
+        <activity android:name=".ui.SendEmail"></activity>
+        <activity android:name=".ui.ViewEvent"></activity>
+        <activity android:name=".ui.NewEvent"></activity>
+    </application>
+
+</manifest>
\ No newline at end of file
Index: src/com/calerem/api/EortologioAPI.java
===================================================================
--- src/com/calerem/api/EortologioAPI.java	(revision 0)
+++ src/com/calerem/api/EortologioAPI.java	(working copy)
@@ -0,0 +1,202 @@
+package com.calerem.api;
+
+import java.io.File;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.io.InputStream;
+import java.net.HttpURLConnection;
+import java.net.URL;
+import java.text.SimpleDateFormat;
+import java.util.ArrayList;
+import java.util.Calendar;
+import java.util.Date;
+import java.util.Locale;
+
+import javax.xml.parsers.DocumentBuilder;
+import javax.xml.parsers.DocumentBuilderFactory;
+import javax.xml.parsers.ParserConfigurationException;
+
+import org.w3c.dom.Document;
+import org.w3c.dom.NodeList;
+import org.xml.sax.SAXException;
+
+import android.app.Activity;
+import android.os.Environment;
+
+import com.calerem.classes.Celebration;
+
+/**
+ * Enables the application to read eortologio.gr
+ * @author DarkParadise
+ */
+public class EortologioAPI extends Activity{
+
+	/**
+	 * Creates the HTTP connection.
+	 * @param String myURL
+	 * @return InputStream
+	 * @throws IOException
+	 */
+	private InputStream openConnection(String myURL) throws IOException
+	{
+		URL url = new URL(myURL);
+		HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();
+		urlConnection.setRequestMethod("GET");
+		urlConnection.connect();
+		return urlConnection.getInputStream();
+	}
+
+	/**
+	 * Creates the file system to save the file from the web.
+	 * @return File
+	 * @throws IOException
+	 */
+	private File createFileSystem(String language) throws IOException
+	{
+		File SDCardCalerem = new File(Environment.getExternalStorageDirectory().getAbsolutePath()+"/Calerem/eortologio/");
+		if(!SDCardCalerem.exists())
+		{
+			SDCardCalerem.mkdirs();
+		}
+
+		File file = new File(SDCardCalerem + "/eortologio_" + language + ".xml");
+		if(!file.exists())
+		{
+			file.createNewFile();
+		}
+		return file;
+	}
+
+	/**
+	 * Retrieves the 2 xml files from the internet.
+	 * @param String grURL
+	 * @param String enURL
+	 * @throws IOException
+	 */
+	public void getFile(String grURL, String enURL) throws IOException
+	{
+		FileOutputStream fileOutput = new FileOutputStream(this.createFileSystem("gr"));
+		InputStream inputStream = this.openConnection(grURL);
+		byte[] buffer = new byte[1024];
+		int bufferLength = 0;
+		while ( (bufferLength = inputStream.read(buffer)) > 0 ) 
+		{
+			fileOutput.write(buffer, 0, bufferLength);
+		}
+		fileOutput.close();
+
+		fileOutput = new FileOutputStream(this.createFileSystem("en"));
+		inputStream = this.openConnection(enURL);
+		buffer = new byte[1024];
+		bufferLength = 0;
+		while ( (bufferLength = inputStream.read(buffer)) > 0 ) 
+		{
+			fileOutput.write(buffer, 0, bufferLength);
+		}
+		fileOutput.close();		
+	}
+
+	/**
+	 * Parse the XML File.
+	 * @return ArrayList<String>
+	 * @throws SAXException
+	 * @throws IOException
+	 * @throws ParserConfigurationException
+	 */
+	private ArrayList<String> parseXML(String language) throws SAXException, IOException, ParserConfigurationException
+	{
+		File file = new File(Environment.getExternalStorageDirectory().getAbsolutePath()+"/Calerem/eortologio/eortologio_" + language + ".xml");
+		ArrayList<String> XMLCelebrations = new ArrayList<String>();
+		if(file.exists())
+		{
+			DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
+			DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
+			Document doc = dBuilder.parse(file);
+			doc.getDocumentElement().normalize();
+			NodeList nodes = doc.getElementsByTagName("item");
+			for(int i=0;i<nodes.getLength();i++)
+			{
+				XMLCelebrations.add(nodes.item(i).getChildNodes().item(0).getFirstChild().getNodeValue());
+			}
+		}
+		return XMLCelebrations;
+	}
+
+	/**
+	 * Splits the string returned from XML to actual names.
+	 * @param ArrayList<String> XMLCelebrations
+	 * @return ArrayList<String>
+	 */
+	private ArrayList<String> splitNamesString(String XMLCelebrations)
+	{
+		ArrayList<String> Celebrations = new ArrayList<String>();
+		String tempStrings[] = XMLCelebrations.substring(XMLCelebrations.indexOf(":")+2).replace(" (πηγή : www.eortologio.gr)", "").replace(" (source : www.namedays.gr)", "").split(", ");
+		for(int j=0;j<tempStrings.length;j++)
+		{
+			Celebrations.add(tempStrings[j].replace(" ", ""));	
+		}
+		return Celebrations;
+	}
+
+	/**
+	 * Clears the strings and prepares the objects.
+	 * @param XMLCelebrations
+	 * @return Celebration[]
+	 */
+	private Celebration[] prepareCelebrations(ArrayList<String> XMLCelebrations)
+	{
+		ArrayList<Celebration> tempCelebrations = new ArrayList<Celebration>();
+		for(int i=0;i<XMLCelebrations.size();i++)
+		{
+			ArrayList<String> CelebrationStrings = this.splitNamesString(XMLCelebrations.get(i));
+			for(int j=0;j<CelebrationStrings.size();j++)
+			{
+				SimpleDateFormat epoch_parser  = new SimpleDateFormat("dd-MM",Locale.ENGLISH);
+				Calendar calendar = Calendar.getInstance();
+				calendar.setTime(new Date());
+				calendar.add(Calendar.DATE, + i);
+				if(!(CelebrationStrings.get(j).contains("δενυπάρχει") || CelebrationStrings.get(j).contains("nowidely")))
+				{
+					tempCelebrations.add(new Celebration("Nameday",CelebrationStrings.get(j),epoch_parser.format(calendar.getTimeInMillis())));	
+				}
+			}
+		}
+		Celebration celebrations[] = new Celebration[tempCelebrations.size()];
+		for(int i=0;i<tempCelebrations.size();i++)
+		{
+			celebrations[i] = tempCelebrations.get(i);
+		}
+		return celebrations;
+	}
+
+	/**
+	 * Takes the 2 arrays and combines them into one.
+	 * @param Celebration[] grcelebrations
+	 * @param Celebration[] encelebrations
+	 * @return Celebration[]
+	 */
+	private Celebration[] combineArrays(Celebration[] grcelebrations,Celebration[] encelebrations)
+	{
+		Celebration celebrations[] = new Celebration[grcelebrations.length + encelebrations.length];
+		System.arraycopy(grcelebrations, 0, celebrations, 0, grcelebrations.length);
+		System.arraycopy(encelebrations, 0, celebrations, grcelebrations.length, encelebrations.length);
+		return celebrations;
+	}
+
+	/**
+	 * Does all steps to get the array from the 2 xml files.
+	 * @return Celebration[]
+	 * @throws SAXException
+	 * @throws IOException
+	 * @throws ParserConfigurationException
+	 */
+	public Celebration[] readXML() throws SAXException, IOException, ParserConfigurationException
+	{
+		ArrayList<String> XMLCelebrations = this.parseXML("gr");
+		Celebration grcelebrations[] = this.prepareCelebrations(XMLCelebrations);
+		XMLCelebrations = this.parseXML("en");
+		Celebration encelebrations[] = this.prepareCelebrations(XMLCelebrations); 
+		Celebration celebrations[] = this.combineArrays(grcelebrations, encelebrations);
+		return celebrations;
+	}
+}
Index: src/com/calerem/classes/Celebration.java
===================================================================
--- src/com/calerem/classes/Celebration.java	(revision 0)
+++ src/com/calerem/classes/Celebration.java	(working copy)
@@ -0,0 +1,71 @@
+/**
+ * 
+ */
+package com.calerem.classes;
+
+/**
+ * Class to hold Celebrations.
+ * @author DarkParadise
+ */
+public class Celebration {
+	
+	private String type;
+	private String name;
+	private String date;
+	
+	/**
+	 * Base Constructor.
+	 * @param String type
+	 * @param String name
+	 * @param String date
+	 */
+	public Celebration(String type, String name, String date)
+	{
+		this.setType(type);
+		this.setName(name);
+		this.setDate(date);
+	}
+
+	/**
+	 * @return the type
+	 */
+	public String getType() {
+		return type;
+	}
+
+	/**
+	 * @param type the type to set
+	 */
+	public void setType(String type) {
+		this.type = type;
+	}
+
+	/**
+	 * @return the name
+	 */
+	public String getName() {
+		return name;
+	}
+
+	/**
+	 * @param name the name to set
+	 */
+	public void setName(String name) {
+		this.name = name;
+	}
+
+	/**
+	 * @return the date
+	 */
+	public String getDate() {
+		return date;
+	}
+
+	/**
+	 * @param date the date to set
+	 */
+	public void setDate(String date) {
+		this.date = date;
+	}
+
+}
